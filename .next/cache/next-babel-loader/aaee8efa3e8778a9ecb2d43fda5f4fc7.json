{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jacob/Documents/cannon-demo/src/pages/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Meta } from \"../layout/Meta\";\nimport { Main } from \"../templates/Main\";\nimport { Line } from \"react-chartjs-2\";\nimport { scenarioOne, scenarioTwo, scenarioThree } from \"../utils/chartInfo\";\n\nconst randomScalingFactor = () => {\n  return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.random() * 100;\n}; // const options = {\n//   responsive: true,\n//   maintainAspectRatio: true,\n//   title: {\n//     display: true,\n//     text: \"BAC Analysis - Robert Cannon M.D.\",\n//     fontSize: 26,\n//     fontFamily: \"'Helvetica'\",\n//     fontColor: \"#374151http://127.0.0.1:4040  \",\n//   },\n//   plugins: {\n//     annotation: {\n//       annotations: {\n//         myHorizontalLine: {\n//           drawTime: \"afterDraw\",\n//           type: \"line\",\n//           scaleID: \"y\",\n//           value: 0.2,\n//           borderColor: \"black\",\n//           borderWidth: 5,\n//           label: {\n//             backgroundColor: \"red\",\n//             content: \"Test Label\",\n//             enabled: true,\n//           },\n//         },\n//         myVerticalLine: {\n//           drawTime: \"afterDraw\",\n//           type: \"line\",\n//           scaleID: \"x\",\n//           value: \"May\",\n//           borderColor: \"black\",\n//           borderWidth: 5,\n//           label: {\n//             backgroundColor: \"red\",\n//             content: \"Test Label\",\n//             enabled: true,\n//           },\n//           click(context) {\n//             // The annotation is is bound to the `this` variable\n//             console.log(\"Annotation\", context);\n//           },\n//         },\n//         myBox: {\n//           drawTime: \"beforeDatasetsDraw\",\n//           type: \"box\",\n//           xScaleID: \"x\",\n//           yScaleID: \"y\",\n//           xMin: \"February\",\n//           xMax: \"April\",\n//           yMin: 0.1,\n//           yMax: 0.7,\n//           backgroundColor: \"rgba(101, 33, 171, 0.5)\",\n//           borderColor: \"rgb(101, 33, 171)\",\n//           borderWidth: 1,\n//           click(context) {\n//             console.log(\"Box\", context);\n//           },\n//         },\n//       },\n//     },\n//   },\n//   scales: {\n//     xAxes: [\n//       {\n//         scaleLabel: {\n//           display: true,\n//           labelString: \"Known Times (AM)\",\n//         },\n//         ticks: {\n//           callback: function (value: String, index, values) {\n//             if (value === \"2:58 AM\") {\n//               return value;\n//             }\n//           },\n//         },\n//       },\n//     ],\n//     yAxes: [\n//       {\n//         scaleLabel: {\n//           display: true,\n//           labelString: \"Blood Alcohol Concentration (g/ml)\",\n//         },\n//         ticks: {\n//           callback: function (value, index, values) {\n//             if (value === 0.16) {\n//               return value;\n//             }\n//           },\n//         },\n//       },\n//     ],\n//   },\n// };\n\n\nconst options = {\n  type: \"line\",\n  data: {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [{\n      label: \"My First dataset\",\n      backgroundColor: \"blue\",\n      borderColor: \"blue\",\n      fill: false,\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]\n    }, {\n      label: \"My Second dataset\",\n      backgroundColor: window.chartColors.blue,\n      borderColor: window.chartColors.blue,\n      fill: false,\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]\n    }]\n  },\n  options: {\n    responsive: true,\n    title: {\n      display: true,\n      text: \"Chart.js Line Chart - Logarithmic\"\n    },\n    scales: {\n      x: {\n        display: true\n      },\n      y: {\n        display: true,\n        type: \"logarithmic\"\n      }\n    },\n    plugins: {\n      annotation: {\n        annotations: {\n          myHorizontalLine: {\n            drawTime: \"afterDraw\",\n            type: \"line\",\n            scaleID: \"y\",\n            value: randomScalingFactor(),\n            borderColor: \"black\",\n            borderWidth: 5,\n            label: {\n              backgroundColor: \"red\",\n              content: \"Test Label\",\n              enabled: true\n            },\n\n            click(context) {\n              // The annotation is is bound to the `this` variable\n              console.log(\"Annotation\", context);\n            }\n\n          },\n          myVerticalLine: {\n            drawTime: \"afterDraw\",\n            type: \"line\",\n            scaleID: \"x\",\n            value: \"May\",\n            borderColor: \"black\",\n            borderWidth: 5,\n            label: {\n              backgroundColor: \"red\",\n              content: \"Test Label\",\n              enabled: true\n            },\n\n            click(context) {\n              // The annotation is is bound to the `this` variable\n              console.log(\"Annotation\", context);\n            }\n\n          },\n          myBox: {\n            drawTime: \"beforeDatasetsDraw\",\n            type: \"box\",\n            xScaleID: \"x\",\n            yScaleID: \"y\",\n            xMin: \"February\",\n            xMax: \"April\",\n            yMin: randomScalingFactor(),\n            yMax: randomScalingFactor(),\n            backgroundColor: \"rgba(101, 33, 171, 0.5)\",\n            borderColor: \"rgb(101, 33, 171)\",\n            borderWidth: 1,\n\n            click(context) {\n              console.log(\"Box\", context);\n            }\n\n          }\n        }\n      }\n    }\n  }\n};\nconst initialData = {\n  labels: [\"(time unknown)\", \"12:42 AM\", \"(time unknown)\", \"2:58 AM\", \"(time unknown)\", \"(time unknown)\"],\n  datasets: [{\n    data: [null, null, null, 0.16, null, null],\n    label: \"One measurement\",\n    backgroundColor: \"#78350F\",\n    borderColor: \"#78350F\",\n    fill: false,\n    pointRadius: [0, 0, 0, 7, 0],\n    pointHoverBorderWidth: [0, 0, 0, 8, 0]\n  }]\n};\n\nconst Index = () => {\n  const {\n    0: scenarioOneShown,\n    1: setScenarioOneShown\n  } = useState(false);\n  const {\n    0: scenarioTwoShown,\n    1: setScenarioTwoShown\n  } = useState(false);\n  const {\n    0: scenarioThreeShown,\n    1: setScenarioThreeShown\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState(initialData);\n\n  const applyScenarioOne = () => {\n    if (!scenarioOneShown) {\n      let updatedDatasets = [...data.datasets, scenarioOne];\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        datasets: updatedDatasets\n      }));\n      setScenarioOneShown(true);\n    }\n  };\n\n  const applyScenarioTwo = () => {\n    if (!scenarioTwoShown) {\n      let updatedDatasets = [...data.datasets, scenarioTwo];\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        datasets: updatedDatasets\n      }));\n      setScenarioTwoShown(true);\n    }\n  };\n\n  const applyScenarioThree = () => {\n    if (!scenarioThreeShown) {\n      let updatedDatasets = [...data.datasets, scenarioThree];\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        datasets: updatedDatasets\n      }));\n      setScenarioThreeShown(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Main, {\n    meta: /*#__PURE__*/_jsxDEV(Meta, {\n      title: \"Cannon Demonstrative\",\n      description: \"The demonstrative for Dr. Robert Cannon - Gardner Consulting.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mx-16 my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex w-full\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: data,\n          width: 600,\n          height: 280,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center w-full mt-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-4 py-2 font-semibold bg-transparent border rounded hover:text-white  \" + (!scenarioOneShown ? \"opacity-25 text-green-700 border-green-500 hover:bg-green-500 hover:border-transparent\" : \"text-white bg-green-500 border-green-500 hover:border-transparent \"),\n          onClick: () => applyScenarioOne(),\n          children: \"Scenario one\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-4 py-2 mx-16 font-semibold bg-transparent border rounded hover:text-white  \" + (!scenarioTwoShown ? \"opacity-25 text-blue-700 border-blue-500 hover:bg-blue-500 hover:border-transparent\" : \"text-white bg-blue-500 border-blue-500 hover:border-transparent \"),\n          onClick: () => applyScenarioTwo(),\n          children: \"Scenario two\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-4 py-2 font-semibold bg-transparent border rounded hover:text-white  \" + (!scenarioThreeShown ? \"opacity-25 text-red-700 border-red-500 hover:bg-red-500 hover:border-transparent\" : \"text-white bg-red-500 border-red-500 hover:border-transparent \"),\n          onClick: () => applyScenarioThree(),\n          children: \"Scenario three\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/jacob/Documents/cannon-demo/src/pages/index.tsx"],"names":["React","useState","Meta","Main","Line","scenarioOne","scenarioTwo","scenarioThree","randomScalingFactor","Math","random","options","type","data","labels","datasets","label","backgroundColor","borderColor","fill","window","chartColors","blue","responsive","title","display","text","scales","x","y","plugins","annotation","annotations","myHorizontalLine","drawTime","scaleID","value","borderWidth","content","enabled","click","context","console","log","myVerticalLine","myBox","xScaleID","yScaleID","xMin","xMax","yMin","yMax","initialData","pointRadius","pointHoverBorderWidth","Index","scenarioOneShown","setScenarioOneShown","scenarioTwoShown","setScenarioTwoShown","scenarioThreeShown","setScenarioThreeShown","setData","applyScenarioOne","updatedDatasets","applyScenarioTwo","applyScenarioThree"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,aAAnC,QAAwD,oBAAxD;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,SAAO,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,GAAtB,GAA4B,CAAC,GAA9B,IAAqCD,IAAI,CAACC,MAAL,EAArC,GAAqD,GAA5D;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,MADQ;AAEdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CADJ;AAEJC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,kBADT;AAEEC,MAAAA,eAAe,EAAE,MAFnB;AAGEC,MAAAA,WAAW,EAAE,MAHf;AAIEC,MAAAA,IAAI,EAAE,KAJR;AAKEN,MAAAA,IAAI,EAAE,CACJL,mBAAmB,EADf,EAEJA,mBAAmB,EAFf,EAG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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Meta } from \"../layout/Meta\";\nimport { Main } from \"../templates/Main\";\nimport { Line } from \"react-chartjs-2\";\nimport { scenarioOne, scenarioTwo, scenarioThree } from \"../utils/chartInfo\";\n\nconst randomScalingFactor = () => {\n  return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.random() * 100;\n};\n\n// const options = {\n//   responsive: true,\n//   maintainAspectRatio: true,\n//   title: {\n//     display: true,\n//     text: \"BAC Analysis - Robert Cannon M.D.\",\n//     fontSize: 26,\n//     fontFamily: \"'Helvetica'\",\n//     fontColor: \"#374151http://127.0.0.1:4040  \",\n//   },\n//   plugins: {\n//     annotation: {\n//       annotations: {\n//         myHorizontalLine: {\n//           drawTime: \"afterDraw\",\n//           type: \"line\",\n//           scaleID: \"y\",\n//           value: 0.2,\n//           borderColor: \"black\",\n//           borderWidth: 5,\n//           label: {\n//             backgroundColor: \"red\",\n//             content: \"Test Label\",\n//             enabled: true,\n//           },\n//         },\n//         myVerticalLine: {\n//           drawTime: \"afterDraw\",\n//           type: \"line\",\n//           scaleID: \"x\",\n//           value: \"May\",\n//           borderColor: \"black\",\n//           borderWidth: 5,\n//           label: {\n//             backgroundColor: \"red\",\n//             content: \"Test Label\",\n//             enabled: true,\n//           },\n//           click(context) {\n//             // The annotation is is bound to the `this` variable\n//             console.log(\"Annotation\", context);\n//           },\n//         },\n//         myBox: {\n//           drawTime: \"beforeDatasetsDraw\",\n//           type: \"box\",\n//           xScaleID: \"x\",\n//           yScaleID: \"y\",\n//           xMin: \"February\",\n//           xMax: \"April\",\n//           yMin: 0.1,\n//           yMax: 0.7,\n//           backgroundColor: \"rgba(101, 33, 171, 0.5)\",\n//           borderColor: \"rgb(101, 33, 171)\",\n//           borderWidth: 1,\n//           click(context) {\n//             console.log(\"Box\", context);\n//           },\n//         },\n//       },\n//     },\n//   },\n//   scales: {\n//     xAxes: [\n//       {\n//         scaleLabel: {\n//           display: true,\n//           labelString: \"Known Times (AM)\",\n//         },\n//         ticks: {\n//           callback: function (value: String, index, values) {\n//             if (value === \"2:58 AM\") {\n//               return value;\n//             }\n//           },\n//         },\n//       },\n//     ],\n//     yAxes: [\n//       {\n//         scaleLabel: {\n//           display: true,\n//           labelString: \"Blood Alcohol Concentration (g/ml)\",\n//         },\n//         ticks: {\n//           callback: function (value, index, values) {\n//             if (value === 0.16) {\n//               return value;\n//             }\n//           },\n//         },\n//       },\n//     ],\n//   },\n// };\n\nconst options = {\n  type: \"line\",\n  data: {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [\n      {\n        label: \"My First dataset\",\n        backgroundColor: \"blue\",\n        borderColor: \"blue\",\n        fill: false,\n        data: [\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n        ],\n      },\n      {\n        label: \"My Second dataset\",\n        backgroundColor: window.chartColors.blue,\n        borderColor: window.chartColors.blue,\n        fill: false,\n        data: [\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n          randomScalingFactor(),\n        ],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n    title: {\n      display: true,\n      text: \"Chart.js Line Chart - Logarithmic\",\n    },\n    scales: {\n      x: {\n        display: true,\n      },\n      y: {\n        display: true,\n        type: \"logarithmic\",\n      },\n    },\n    plugins: {\n      annotation: {\n        annotations: {\n          myHorizontalLine: {\n            drawTime: \"afterDraw\",\n            type: \"line\",\n            scaleID: \"y\",\n            value: randomScalingFactor(),\n            borderColor: \"black\",\n            borderWidth: 5,\n            label: {\n              backgroundColor: \"red\",\n              content: \"Test Label\",\n              enabled: true,\n            },\n            click(context) {\n              // The annotation is is bound to the `this` variable\n              console.log(\"Annotation\", context);\n            },\n          },\n          myVerticalLine: {\n            drawTime: \"afterDraw\",\n            type: \"line\",\n            scaleID: \"x\",\n            value: \"May\",\n            borderColor: \"black\",\n            borderWidth: 5,\n            label: {\n              backgroundColor: \"red\",\n              content: \"Test Label\",\n              enabled: true,\n            },\n            click(context) {\n              // The annotation is is bound to the `this` variable\n              console.log(\"Annotation\", context);\n            },\n          },\n          myBox: {\n            drawTime: \"beforeDatasetsDraw\",\n            type: \"box\",\n            xScaleID: \"x\",\n            yScaleID: \"y\",\n            xMin: \"February\",\n            xMax: \"April\",\n            yMin: randomScalingFactor(),\n            yMax: randomScalingFactor(),\n            backgroundColor: \"rgba(101, 33, 171, 0.5)\",\n            borderColor: \"rgb(101, 33, 171)\",\n            borderWidth: 1,\n            click(context) {\n              console.log(\"Box\", context);\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nconst initialData = {\n  labels: [\n    \"(time unknown)\",\n    \"12:42 AM\",\n    \"(time unknown)\",\n    \"2:58 AM\",\n    \"(time unknown)\",\n    \"(time unknown)\",\n  ],\n  datasets: [\n    {\n      data: [null, null, null, 0.16, null, null],\n      label: \"One measurement\",\n      backgroundColor: \"#78350F\",\n      borderColor: \"#78350F\",\n      fill: false,\n      pointRadius: [0, 0, 0, 7, 0],\n      pointHoverBorderWidth: [0, 0, 0, 8, 0],\n    },\n  ],\n};\n\nconst Index = () => {\n  const [scenarioOneShown, setScenarioOneShown] = useState(false);\n  const [scenarioTwoShown, setScenarioTwoShown] = useState(false);\n  const [scenarioThreeShown, setScenarioThreeShown] = useState(false);\n  const [data, setData] = useState(initialData);\n\n  const applyScenarioOne = () => {\n    if (!scenarioOneShown) {\n      let updatedDatasets = [...data.datasets, scenarioOne];\n      setData({ ...data, datasets: updatedDatasets });\n      setScenarioOneShown(true);\n    }\n  };\n\n  const applyScenarioTwo = () => {\n    if (!scenarioTwoShown) {\n      let updatedDatasets = [...data.datasets, scenarioTwo];\n      setData({ ...data, datasets: updatedDatasets });\n      setScenarioTwoShown(true);\n    }\n  };\n\n  const applyScenarioThree = () => {\n    if (!scenarioThreeShown) {\n      let updatedDatasets = [...data.datasets, scenarioThree];\n      setData({ ...data, datasets: updatedDatasets });\n      setScenarioThreeShown(true);\n    }\n  };\n\n  return (\n    <Main\n      meta={\n        <Meta\n          title=\"Cannon Demonstrative\"\n          description=\"The demonstrative for Dr. Robert Cannon - Gardner Consulting.\"\n        />\n      }\n    >\n      <div className=\"mx-16 my-10\">\n        <div className=\"flex w-full\">\n          <Line data={data} width={600} height={280} options={options}></Line>\n        </div>\n        <div className=\"flex justify-center w-full mt-12\">\n          <button\n            className={\n              \"px-4 py-2 font-semibold bg-transparent border rounded hover:text-white  \" +\n              (!scenarioOneShown\n                ? \"opacity-25 text-green-700 border-green-500 hover:bg-green-500 hover:border-transparent\"\n                : \"text-white bg-green-500 border-green-500 hover:border-transparent \")\n            }\n            onClick={() => applyScenarioOne()}\n          >\n            Scenario one\n          </button>\n          <button\n            className={\n              \"px-4 py-2 mx-16 font-semibold bg-transparent border rounded hover:text-white  \" +\n              (!scenarioTwoShown\n                ? \"opacity-25 text-blue-700 border-blue-500 hover:bg-blue-500 hover:border-transparent\"\n                : \"text-white bg-blue-500 border-blue-500 hover:border-transparent \")\n            }\n            onClick={() => applyScenarioTwo()}\n          >\n            Scenario two\n          </button>\n          <button\n            className={\n              \"px-4 py-2 font-semibold bg-transparent border rounded hover:text-white  \" +\n              (!scenarioThreeShown\n                ? \"opacity-25 text-red-700 border-red-500 hover:bg-red-500 hover:border-transparent\"\n                : \"text-white bg-red-500 border-red-500 hover:border-transparent \")\n            }\n            onClick={() => applyScenarioThree()}\n          >\n            Scenario three\n          </button>\n        </div>\n      </div>\n    </Main>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}